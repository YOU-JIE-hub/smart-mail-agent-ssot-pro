#!/usr/bin/env python3
# 檔案位置: src/smart_mail_agent/utils/pdf_safe.py
# 模組用途: 安全地輸出 PDF 或純文字；無字型/無 reportlab 時自動降級為 .txt。
from __future__ import annotations

from pathlib import Path
from typing import Optional


def write_pdf_or_txt(out_path: str, text: str, font_path: Optional[str] = None) -> str:
    """
    參數:
        out_path: 期望輸出的檔案路徑（可為 .pdf 或 .txt）
        text: 內容（UTF-8）
        font_path: TTF 字型路徑（可選；未提供或不可用時自動改寫 .txt）
    回傳:
        str: 實際寫出的檔案路徑
    """
    out = Path(out_path)
    out.parent.mkdir(parents=True, exist_ok=True)
    # 若無 reportlab 或字型不可用，直接輸出 .txt
    try:
        from reportlab.pdfbase import pdfmetrics  # type: ignore
        from reportlab.pdfbase.ttfonts import TTFont  # type: ignore
        from reportlab.pdfgen import canvas  # type: ignore
        use_pdf = out.suffix.lower() == ".pdf" and font_path and Path(font_path).is_file()
    except Exception:
        use_pdf = False

    if not use_pdf:
        if out.suffix.lower() == ".pdf":
            out = out.with_suffix(".txt")
        out.write_text(text, encoding="utf-8")
        return str(out)

    # PDF 輸出（最小版）
    c = canvas.Canvas(str(out))
    try:
        pdfmetrics.registerFont(TTFont("UserFont", font_path))  # type: ignore
        c.setFont("UserFont", 12)
    except Exception:
        c.setFont("Helvetica", 12)
    y = 800
    for line in text.splitlines() or [""]:
        c.drawString(36, y, line)
        y -= 16
        if y < 36:
            c.showPage(); y = 800
    c.save()
    return str(out)
