[
  {
    "path": "tools/e2e_route_actions.py",
    "size": 3272,
    "lines": 80,
    "md5": "4112f07b4558de82c115e7e71dcbeb5b",
    "head": "from __future__ import annotations\nimport os, sys, json, time\nfrom pathlib import Path\n\ndef _call_rule(email:dict):"
  },
  {
    "path": "tools/tri_suite.py",
    "size": 1972,
    "lines": 54,
    "md5": "d9b1d691deb895cc98ab5e570d7c855c",
    "head": "from __future__ import annotations\nimport json, time\nfrom pathlib import Path\nfrom collections import Counter, defaultdict\n"
  },
  {
    "path": "tools/actions/action_bus.py",
    "size": 5671,
    "lines": 107,
    "md5": "0343c214b099112651fa13d08fba449d",
    "head": "from __future__ import annotations\nimport os, time, json, sqlite3\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional\n"
  },
  {
    "path": "tools/orch/planner_bridge.py",
    "size": 3058,
    "lines": 61,
    "md5": "416dd24250bc539c5e7ade42d9cdb37b",
    "head": "from __future__ import annotations\nimport os, importlib\nfrom typing import Callable, Dict, Any\n\ndef _fallback_plan_action(intent: str, confidence: float, email: dict, slots: dict | None=None) -> Dict[str, Any]:"
  },
  {
    "path": "tools/pipeline_ml_boosted.py",
    "size": 1261,
    "lines": 30,
    "md5": "52fda1ca7f229aa0d5d1ea9c82cd55d2",
    "head": "from __future__ import annotations\nfrom tools.ml_io import predict as _ml_predict\nimport sma_features as F  # 規則特徵\n# 你的 IDX2NAME 如需客製可從外部載；先以簡化範例示意\nIDX2NAME = {"
  },
  {
    "path": "tools/pipeline_ml.py",
    "size": 389,
    "lines": 8,
    "md5": "025557033fca28d9c3a864217db271f0",
    "head": "from __future__ import annotations\nfrom tools.ml_io import predict, DEFAULT_ML_PKL\ndef classify_ml(email: dict, pkl=DEFAULT_ML_PKL): return predict(email, pkl)\nif __name__==\"__main__\":\n    import sys, json"
  },
  {
    "path": "tools/pipeline_baseline.py",
    "size": 1979,
    "lines": 29,
    "md5": "caef1c03b19121e0ca71f3cdcdba8677",
    "head": "from __future__ import annotations\nimport json, re, os\nfrom pathlib import Path\nfrom typing import Dict, Any\nROOT = Path(os.environ.get(\"ROOT\") or Path.cwd())"
  },
  {
    "path": "tools/ml_io.py",
    "size": 4649,
    "lines": 121,
    "md5": "9fc4427f9bfa06ef27fd0af530fa8167",
    "head": "from __future__ import annotations\nimport os, sys, json, re, types\nfrom pathlib import Path\n\nDEFAULT_ML_PKL = Path(os.environ.get(\"SMA_INTENT_ML_PKL\") or \"artifacts/intent_pro_cal.pkl\")"
  },
  {
    "path": "tools/adapters/email_smtp.py",
    "size": 494,
    "lines": 10,
    "md5": "dc9023e4159102e2b4296235580cf99f",
    "head": "from __future__ import annotations\nimport os, time, pathlib\ndef send_email(subject:str, body:str, to:str, out_dir=\"reports_auto/actions/email\"):\n    dry = os.environ.get(\"SMA_DRY_RUN\",\"1\")!=\"0\"\n    od = pathlib.Path(out_dir); od.mkdir(parents=True, exist_ok=True)"
  },
  {
    "path": "tools/adapters/slack.py",
    "size": 469,
    "lines": 9,
    "md5": "fdb1b63f3c274af45e25c5b71a4fa8f9",
    "head": "from __future__ import annotations\nimport os, time, pathlib, json\ndef notify(channel:str, text:str, out_dir=\"reports_auto/actions/slack\"):\n    dry = os.environ.get(\"SMA_DRY_RUN\",\"1\")!=\"0\"\n    od=pathlib.Path(out_dir); od.mkdir(parents=True, exist_ok=True)"
  },
  {
    "path": "tools/adapters/ticket_stub.py",
    "size": 572,
    "lines": 9,
    "md5": "d3996a621fb1adb4197f582d330d3f6f",
    "head": "from __future__ import annotations\nimport os, time, pathlib, json\ndef create_ticket(subject:str, body:str, tags=None, severity:str=\"P3\", out_dir=\"reports_auto/actions/tickets\"):\n    dry = os.environ.get(\"SMA_DRY_RUN\",\"1\")!=\"0\"\n    od=pathlib.Path(out_dir); od.mkdir(parents=True, exist_ok=True)"
  },
  {
    "path": "tools/adapters/crm_stub.py",
    "size": 523,
    "lines": 9,
    "md5": "e8905b21733a2f9ed8fb686be22a7def",
    "head": "from __future__ import annotations\nimport os, time, pathlib, json\ndef upsert_deal(title:str, total:int, meta:dict=None, out_dir=\"reports_auto/actions/crm\"):\n    dry = os.environ.get(\"SMA_DRY_RUN\",\"1\")!=\"0\"\n    od=pathlib.Path(out_dir); od.mkdir(parents=True, exist_ok=True)"
  },
  {
    "path": "tools/adapters/pdf_placeholder.py",
    "size": 321,
    "lines": 8,
    "md5": "f60f52053ed01c5dcc513aef8c7f87e6",
    "head": "from __future__ import annotations\nimport time, pathlib\ndef write_quote_txt(summary:str, out_dir=\"reports_auto/actions/quotes\"):\n    od=pathlib.Path(out_dir); od.mkdir(parents=True, exist_ok=True)\n    fn=od/f\"{time.strftime('%Y%m%dT%H%M%S')}.txt\""
  },
  {
    "path": "src/sma_features.py",
    "size": 2521,
    "lines": 62,
    "md5": "85319c1a17937b4111bb86bfc8f7ec42",
    "head": "from __future__ import annotations\nfrom pathlib import Path\nfrom typing import Any, List\nimport json, re\nimport numpy as np"
  },
  {
    "path": "fixtures/eval_set.jsonl",
    "size": 506,
    "lines": 7,
    "md5": "e893373c5c4ba44f7f5589ab9dcdc9c8",
    "head": "{\"intent\":\"一般回覆\",\"email\":{\"subject\":\"[一般回覆] 測試\",\"body\":\"hello\"}}\n{\"intent\":\"報價\",\"email\":{\"subject\":\"報價 請提供 單價:100 數量:2\",\"body\":\"\"}}\n{\"intent\":\"投訴\",\"email\":{\"subject\":\"投訴\",\"body\":\"客訴\"}}\n{\"intent\":\"技術支援\",\"email\":{\"subject\":\"技術支援 ticket:TS-1234\",\"body\":\"\"}}\n{\"intent\":\"規則詢問\",\"email\":{\"subject\":\"請問規則\",\"body\":\"這是規則詢問\"}}"
  },
  {
    "path": "reports_auto/prod_quick_report.md",
    "size": 97,
    "lines": 6,
    "md5": "a0d1841432ae40e97409fb0c78f9fdbc",
    "head": "# Spam quick report\n\n- TEXT Macro-F1: 0.9737\n- RULE Macro-F1: 0.4028\n- ENSEMBLE Macro-F1: 0.9646"
  }
]