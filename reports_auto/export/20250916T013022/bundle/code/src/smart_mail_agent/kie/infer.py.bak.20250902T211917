#!/usr/bin/env python3
# 檔案位置: src/smart_mail_agent/kie/infer.py
# 模組用途: KIE 推論（若找不到 HF 權重則回退到簡單 regex）。

from __future__ import annotations

import json
import re
from pathlib import Path
from typing import Any, Dict, List, Optional


class KIE:
    def __init__(self, project_root: Optional[Path] = None) -> None:
        self.root = Path(project_root or Path(__file__).resolve().parents[3])
        self.hf: Optional[Path] = None
        self.id2label: Dict[int, str] = {}
        self._try_load_hf()

    def _try_load_hf(self) -> None:
        try:
            # 延遲匯入以便 OFFLINE 可用
            import torch  # noqa: F401
            import transformers  # noqa: F401

            # 嘗試兩個常見 KIE 權重落點
            cands = [self.root / "kie", self.root / "reports_auto" / "kie" / "kie"]
            hfdir = next((d for d in cands if (d / "config.json").exists()), None)
            if not hfdir:
                return

            from transformers import AutoModelForTokenClassification, AutoTokenizer

            self.tokenizer = AutoTokenizer.from_pretrained(hfdir)
            self.model = AutoModelForTokenClassification.from_pretrained(hfdir)
            cfg = json.loads((hfdir / "config.json").read_text(encoding="utf-8"))
            id2label = cfg.get("id2label")
            if isinstance(id2label, dict):
                id2label = {int(k): v for k, v in id2label.items()}
            else:
                label2id = cfg.get("label2id") or {}
                id2label = {int(v): k for k, v in label2id.items()}
            self.id2label = id2label
            self.hf = hfdir
        except Exception:
            self.hf = None

    # 極簡 regex 後援
    def _regex(self, text: str) -> List[Dict[str, Any]]:
        spans: List[Dict[str, Any]] = []
        m = re.search(r"\b(20\d{2}-\d{2}-\d{2}|\d{1,2}/\d{1,2}/20\d{2})\b", text)
        if m:
            spans.append({"label": "date_time", "start": m.start(), "end": m.end()})
        m = re.search(r"\b(\$?\d+(?:\.\d{2})?)\b", text)
        if m:
            spans.append({"label": "amount", "start": m.start(), "end": m.end()})
        for kw, lbl in [("prod", "env"), ("uat", "env"), ("sla", "sla")]:
            i = text.lower().find(kw)
            if i >= 0:
                spans.append({"label": lbl, "start": i, "end": i + len(kw)})
        return spans

    def infer(self, text: str) -> List[Dict[str, Any]]:
        if not self.hf:
            return self._regex(text)
        # 為簡潔，此處仍先用 regex；若需 HF 推論，可擴充
        return self._regex(text)

    def extract(self, text: str) -> Dict[str, Any]:
        return {"spans": self.infer(text)}
