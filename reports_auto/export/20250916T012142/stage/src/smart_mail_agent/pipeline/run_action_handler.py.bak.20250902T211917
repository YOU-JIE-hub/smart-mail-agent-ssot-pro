#!/usr/bin/env python3
# 檔案位置: src/smart_mail_agent/pipeline/run_action_handler.py
# 模組用途: 讀取 .eml → Spam → Intent → KIE → 規劃動作 → 回傳 SUMMARY.md 文字。

from __future__ import annotations

from collections import Counter
from pathlib import Path
from typing import List

from smart_mail_agent.intent.classifier import IntentRouter
from smart_mail_agent.kie.infer import KIE
from smart_mail_agent.spam.ens import SpamEnsemble

from .action_handler import plan_actions


def run_e2e_mail(eml_dir: Path, out_root: Path) -> str:
    """
    參數:
        eml_dir: 含 .eml 檔的資料夾
        out_root: 輸出根
    回傳:
        str: SUMMARY.md 內容
    """
    project_root = Path(__file__).resolve().parents[3]
    cases: List[dict] = []
    for p in sorted(Path(eml_dir).glob("*.eml")):
        t = p.read_text(encoding="utf-8", errors="ignore")
        subj = ""
        body = t
        if "\n\n" in t:
            hdr, body = t.split("\n\n", 1)
            for line in hdr.splitlines():
                if line.lower().startswith("subject:"):
                    subj = line.split(":", 1)[1].strip()
                    break
        cases.append({"id": p.stem, "subject": subj, "body": body})

    clf_spam = SpamEnsemble(project_root)
    clf_intent = IntentRouter()  # 相容名稱；實際等同 IntentClassifier
    kie = KIE(project_root)

    ens1 = 0
    ens0 = 0
    final: List[dict] = []

    for c in cases:
        text = (c["subject"] or "") + "\n" + (c["body"] or "")
        if clf_spam.is_spam(text, sender=None):
            ens1 += 1
            final.append({"id": c["id"], "intent": "quarantine", "fields": {}})
            continue
        ens0 += 1
        label, _ = clf_intent.predict(text)
        final.append({"id": c["id"], "intent": label, "fields": {"kie": kie.extract(text)}})

    outdir = out_root / "rpa_out"
    outdir.mkdir(parents=True, exist_ok=True)
    plan_actions(final, outdir)

    cnt = Counter(x["intent"] for x in final)
    lines = [
        "# E2E SUMMARY",
        "",
        f"Total mails: {len(cases)}",
        f"Spam: {ens1}  |  Ham: {ens0}",
        "Top intents:",
    ]
    for k, v in cnt.most_common():
        lines.append(f"- {k}: {v}")
    return "\n".join(lines) + "\n"
