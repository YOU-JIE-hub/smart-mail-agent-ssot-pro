from __future__ import annotations
import os, time, json, sqlite3
from pathlib import Path
from typing import Dict, Any, Optional

DB_PATH = Path("db/sma.sqlite")
ART = Path("reports_auto/actions")
ART.mkdir(parents=True, exist_ok=True)

def _ensure_db():
    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    con = sqlite3.connect(DB_PATH)
    cur = con.cursor()
    cur.execute("""CREATE TABLE IF NOT EXISTS actions(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        ts TEXT, intent TEXT, action TEXT, status TEXT,
        artifact_path TEXT, ext TEXT, message TEXT
    )""")
    cur.execute("""CREATE TABLE IF NOT EXISTS dead_letters(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        ts TEXT, intent TEXT, action TEXT, reason TEXT, payload TEXT
    )""")
    con.commit(); con.close()

class ActionBus:
    """
    統一的動作匯流排。
    - dry_run=True：只寫檔，不對外發送（落地到 reports_auto/actions/*）
    - execute(mail_id, intent, plan) -> dict(status, artifact, ext, latency_ms)
    """
    def __init__(self, dry_run: bool=True):
        self.dry = bool(dry_run)
        _ensure_db()

    # ---- adapters (optional) ----
    def _maybe_email(self):
        try:
            from tools.adapters.email_smtp import EmailClient
            return EmailClient(dry_run=self.dry)
        except Exception:
            return None
    def _maybe_slack(self):
        try:
            from tools.adapters.slack import SlackClient
            return SlackClient(dry_run=self.dry)
        except Exception:
            return None
    def _maybe_ticket(self):
        try:
            from tools.adapters.ticket_stub import TicketClient
            return TicketClient(dry_run=self.dry)
        except Exception:
            return None
    def _maybe_crm(self):
        try:
            from tools.adapters.crm_stub import CRMClient
            return CRMClient(dry_run=self.dry)
        except Exception:
            return None
    def _maybe_pdf(self):
        try:
            from tools.adapters.pdf_placeholder import PDFMaker
            return PDFMaker()
        except Exception:
            return None

    # ---- logging ----
    def _log_ok(self, ts: str, intent: str, action: str, artifact: Optional[str], ext: Optional[str]="", msg: str=""):
        con = sqlite3.connect(DB_PATH); cur = con.cursor()
        cur.execute("INSERT INTO actions(ts,intent,action,status,artifact_path,ext,message) VALUES(?,?,?,?,?,?,?)",
                    (ts,intent,action,"ok", artifact or "", ext or "", msg))
        con.commit(); con.close()

    def _log_dead(self, ts: str, intent: str, action: str, reason: str, payload: Dict[str,Any]):
        con = sqlite3.connect(DB_PATH); cur = con.cursor()
        cur.execute("INSERT INTO dead_letters(ts,intent,action,reason,payload) VALUES(?,?,?,?,?)",
                    (ts,intent,action,reason, json.dumps(payload, ensure_ascii=False)))
        con.commit(); con.close()

    # ---- helpers ----
    def _write_email_eml(self, ts: str, subject: str, body: str) -> str:
        out = ART/"email"/f"{ts}.eml"; out.parent.mkdir(parents=True, exist_ok=True)
        out.write_text(f"Subject: {subject}\n\n{body}\n", encoding="utf-8")
        return str(out)

    def _write_ticket_json(self, ts: str, payload: Dict[str,Any]) -> str:
        sev = payload.get("severity","P3")
        out = ART/"tickets"/f"{ts}_{sev}.json"; out.parent.mkdir(parents=True, exist_ok=True)
        out.write_text(json.dumps(payload, ensure_ascii=False, indent=2), encoding="utf-8")
        return str(out)

    def _write_slack_json(self, ts: str, payload: Dict[str,Any]) -> str:
        out = ART/"slack"/f"{ts}.json"; out.parent.mkdir(parents=True, exist_ok=True)
        out.write_text(json.dumps(payload, ensure_ascii=False, indent=2), encoding="utf-8")
        return str(out)

    def _write_cr_change(self, ts: str, payload: Dict[str,Any]) -> str:
        out = ART/"change_requests"/f"{ts}.json"; out.parent.mkdir(parents=True, exist_ok=True)
        out.write_text(json.dumps(payload, ensure_ascii=False, indent=2), encoding="utf-8")
        return str(out)

    # ---- main ----
    def execute(self, mail_id: str, intent: str, plan: Dict[str,Any]) -> Dict[str,Any]:
        t0 = time.time()
        ts = time.strftime("%Y-%m-%dT%H:%M:%S")
        action = plan.get("action","reply_email")
        route  = (plan.get("route") or {})
        chan   = route.get("channel","email")
        params = (plan.get("params") or {})
        artifact = None; ext=None

        try:
            # 1) policy / reply / quote -> email
            if action in ("reply_email","policy_reply","quote_reply"):
                subj = params.get("subject") or f"[{intent}] 自動回覆"
                body = params.get("body") or json.dumps(params, ensure_ascii=False)
                em = self._maybe_email()
                if em and hasattr(em, "send_draft"):
                    artifact = em.send_draft(subject=subj, body=body)
                else:
                    artifact = self._write_email_eml(ts.replace(":",""), subj, body)

            # 2) create_ticket / tech support / complaint
            elif action=="create_ticket":
                tk = self._maybe_ticket()
                if tk and hasattr(tk, "create"):
                    ext, artifact = tk.create(**params)
                else:
                    artifact = self._write_ticket_json(ts.replace(":",""), params)
                    ext = Path(artifact).stem

            # 3) change_request（CRM）
            elif action=="change_request":
                crm = self._maybe_crm()
                if crm and hasattr(crm, "submit_change"):
                    ext, artifact = crm.submit_change(**params)
                else:
                    artifact = self._write_cr_change(ts.replace(":",""), params)
                    ext = Path(artifact).stem

            # 4) notify_slack
            elif action=="notify_slack":
                sk = self._maybe_slack()
                if sk and hasattr(sk, "send_json"):
                    artifact = sk.send_json(params)
                else:
                    artifact = self._write_slack_json(ts.replace(":",""), params)

            # 5) hitl_queue
            elif action=="hitl_queue":
                # 僅記錄到 DB（artifact 留空）
                pass

            # 6) generate_pdf（例如報價單）
            elif action=="generate_pdf":
                maker = self._maybe_pdf()
                if maker and hasattr(maker, "make"):
                    artifact = maker.make(params)
                else:
                    # 沒 adapter 就當成已完成（artifact 留空或指向 params dump）
                    artifact = self._write_cr_change(ts.replace(":",""), {"pdf_params":params})

            else:
                # 未知動作 → 歸人審；不丟掉
                action = "hitl_queue"

            latency = (time.time()-t0)*1000.0
            self._log_ok(ts, intent, action, artifact, ext)
            return {"status":"ok","artifact":artifact,"ext":ext,"latency_ms":latency}
        except Exception as e:
            self._log_dead(ts, intent, action, f"{type(e).__name__}: {e}", {"plan":plan})
            return {"status":"error","artifact":artifact,"ext":ext,"latency_ms":(time.time()-t0)*1000.0,"error":str(e)}
