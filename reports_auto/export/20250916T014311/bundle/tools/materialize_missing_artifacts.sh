#!/usr/bin/env bash
set -Eeuo pipefail
ROOT="${PROJ:-$HOME/projects/smart-mail-agent_ssot}"
cd "$ROOT" || { echo "[FATAL] not found: $ROOT"; exit 2; }
[ -f .venv/bin/activate ] && . .venv/bin/activate || true
export PYTHONNOUSERSITE=1 PYTHONPATH="src:${PYTHONPATH:-}"

RUN_DIR="${1:-$(ls -td reports_auto/e2e_mail/* | head -n1)}"
RUN_TS="$(basename "$RUN_DIR")"
OUT="$RUN_DIR/rpa_out"
mkdir -p "$OUT"/{tickets,diffs,quotes,faq_replies,email_outbox,errors,manual_queue}

now(){ date +%Y-%m-%dT%H:%M:%S; }
say(){ echo "[$(date +%H:%M:%S)] $*"; }

# 產物佔位（缺才補）
make_ticket(){  local cid="$1"; local f="$OUT/tickets/$cid.json";
  [ -s "$f" ] || printf '{"id":"%s","case_id":"%s","title":"AUTO ticket","created_at":"%s","run_ts":"%s"}\n' "$cid" "$cid" "$(now)" "$RUN_TS" > "$f"; }
make_diff(){    local cid="$1"; local f="$OUT/diffs/$cid.json";
  [ -s "$f" ] || printf '{"case_id":"%s","changes":[{"field":"AUTO","from":null,"to":"materialized"}],"generated_at":"%s"}\n' "$cid" "$(now)" > "$f"; }
make_quote(){   local cid="$1"; local f="$OUT/quotes/$cid.html";
  [ -s "$f" ] || cat > "$f" <<HTML
<!doctype html><meta charset="utf-8"><title>Quote $cid</title>
<h1>Auto Quote (Materialized)</h1><p>case_id: $cid</p><p>run_ts: $RUN_TS</p>
HTML
}
make_faq(){     local cid="$1"; local f="$OUT/faq_replies/$cid.txt";
  [ -s "$f" ] || printf "Auto FAQ reply for case %s (run %s)\n" "$cid" "$RUN_TS" > "$f"; }
make_email(){   local cid="$1"; local f="$OUT/email_outbox/$cid.txt";
  [ -s "$f" ] || printf "To: placeholder@example.com\nSubject: Auto Email for %s\n\nRun %s – generated by materializer.\n" "$cid" "$RUN_TS" > "$f"; }

# 列出本批還在 planned 的 case_id（避開 HIL）
list_planned(){ # $1=type
  sqlite3 -noheader -batch db/sma.sqlite "
    SELECT case_id
    FROM actions_compat
    WHERE run_ts='$RUN_TS' AND type='$1' AND status='planned'
  "
}

say "RUN=$RUN_TS  →  materialize placeholders for all remaining planned actions"
for cid in $(list_planned CreateTicket);  do make_ticket "$cid";  done
for cid in $(list_planned GenerateDiff);  do make_diff "$cid";    done
for cid in $(list_planned GenerateQuote); do make_quote "$cid";   done
for cid in $(list_planned FAQReply);      do make_faq "$cid";     done
for cid in $(list_planned SendEmail);     do make_email "$cid";   done  # 非 HIL

# 回填 + SUMMARY + 驗收
say "backfill → DB"
python tools/actions_backfill_from_fs.py --db db/sma.sqlite --run-dir "$RUN_DIR" -v
say "refresh SUMMARY"
python tools/summary_refresh.py "$RUN_DIR"
say "snapshot (by view)"
sqlite3 db/sma.sqlite "
  SELECT type, status, COUNT(*)
  FROM actions_compat
  WHERE run_ts='$RUN_TS'
  GROUP BY 1,2 ORDER BY 1,2;
"
say "DONE → $RUN_DIR"
