[*] /debug/proba already present
[*] ENV
  SMA_INTENT_ML_PKL=/home/youjie/projects/smart-mail-agent-ssot-pro/intent/intent/artifacts/intent_pro_cal.pkl
  SMA_RULES_SRC=/home/youjie/projects/smart-mail-agent-ssot-pro/intent/intent/.sma_tools/runtime_threshold_router.py
  SMA_ERR_DIR=/home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/ERR
  PORT=8000
[OK] API ready :8000
[*] Using API_DIR: /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/api/20250915T201456
[*] PORT=8000
[*] smoke rule -> reports_auto/api/20250915T201456/sanity_smoke_rule.json
{
  "pred": [
    "biz_quote",
    "tech_support"
  ],
  "latency_ms": 0,
  "route": "rule"
}
[*] smoke ml -> reports_auto/api/20250915T201456/sanity_smoke_ml.json
{
  "error": "server_error",
  "trace": "Traceback (most recent call last):\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/scripts/http_api_min.py\", line 188, in do_POST\n    yp=route_ml(texts); tag=\"ml\"\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/scripts/http_api_min.py\", line 115, in route_ml\n    proba=est.predict_proba(texts)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/pipeline.py\", line 905, in predict_proba\n    return self.steps[-1][1].predict_proba(Xt, **params)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/calibration.py\", line 513, in predict_proba\n    proba = calibrated_classifier.predict_proba(X)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/calibration.py\", line 743, in predict_proba\n    predictions, _ = _get_response_values(\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/utils/_response.py\", line 214, in _get_response_values\n    y_pred = prediction_method(X)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/linear_model/_base.py\", line 352, in decision_function\n    X = validate_data(self, X, accept_sparse=\"csr\", reset=False)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 2975, in validate_data\n    _check_n_features(_estimator, X, reset=reset)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 2839, in _check_n_features\n    raise ValueError(\nValueError: X has 29227 features, but LinearSVC is expecting 29233 features as input.\n"
}
[*] /tri-eval -> reports_auto/api/20250915T201456/sanity_tri_eval.json
{
  "error": "server_error",
  "trace": "Traceback (most recent call last):\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/scripts/http_api_min.py\", line 223, in do_POST\n    t1=time.perf_counter(); yp=fn(texts); ms=int((time.perf_counter()-t1)*1000)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/scripts/http_api_min.py\", line 115, in route_ml\n    proba=est.predict_proba(texts)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/pipeline.py\", line 905, in predict_proba\n    return self.steps[-1][1].predict_proba(Xt, **params)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/calibration.py\", line 513, in predict_proba\n    proba = calibrated_classifier.predict_proba(X)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/calibration.py\", line 743, in predict_proba\n    predictions, _ = _get_response_values(\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/utils/_response.py\", line 214, in _get_response_values\n    y_pred = prediction_method(X)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/linear_model/_base.py\", line 352, in decision_function\n    X = validate_data(self, X, accept_sparse=\"csr\", reset=False)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 2975, in validate_data\n    _check_n_features(_estimator, X, reset=reset)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 2839, in _check_n_features\n    raise ValueError(\nValueError: X has 29227 features, but LinearSVC is expecting 29233 features as input.\n"
}
[PATHS]
  RUN_DIR = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/api/20250915T201456
  LOG     = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/api/20250915T201456/run.log
  ERR     = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/api/20250915T201456/api.err
  PY_LAST = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/api/20250915T201456/py_last_trace.txt
  SERVER  = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/api/20250915T201456/server.log
  SMOKE_R = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/api/20250915T201456/sanity_smoke_rule.json
  SMOKE_M = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/api/20250915T201456/sanity_smoke_ml.json
  TRI_OUT = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/api/20250915T201456/sanity_tri_eval.json
[*] PYBIN=./.venv/bin/python
[*] DATA=data/intent_eval/dataset.cleaned.jsonl
[*] PKL=/home/youjie/projects/smart-mail-agent-ssot-pro/intent/intent/artifacts/intent_pro_cal.pkl
[*] RULES_SRC=/home/youjie/projects/smart-mail-agent-ssot-pro/intent/intent/.sma_tools/runtime_threshold_router.py (bind to __main__.rules_feat)
[OK] wrote: reports_auto/eval_fix/20250915T234931/tri_results_fixed.json
[PATHS]
  RUN = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/eval_fix/20250915T234931
  LOG = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/eval_fix/20250915T234931/run.log
  ERR = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/eval_fix/20250915T234931/tri_eval.err
  PY_LAST = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/eval_fix/20250915T234931/py_last_trace.txt
  RESULT = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/eval_fix/20250915T234931/tri_results_fixed.json
reports_auto/status/INTENTS_SUMMARY_20250915T234931.md
[PATHS]
  LAST_DIR = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/eval_fix/20250915T234931
  RESULT   = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/eval_fix/20250915T234931/tri_results_fixed.json
  SUMMARY  = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/status/INTENTS_SUMMARY_20250915T234931.md
{"ok": true, "reasons": [], "tri_eval": "reports_auto/eval_fix/20250915T234931/tri_results_fixed.json"}
[WHERE] /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/ERR
  SERVER  = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/ERR/server.log
  RUNLOG  = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/ERR/run.log
  API_ERR = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/ERR/api.err
  PY_LAST = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/ERR/py_last_trace.txt
[*] /debug/model_meta
{
  "est_type": "Pipeline",
  "clf_type": "CalibratedClassifierCV",
  "classes": [
    "biz_quote",
    "complaint",
    "other",
    "policy_qa",
    "profile_update",
    "tech_support"
  ]
}
[*] /debug/proba (top6)
{
  "error": "server_error",
  "trace": "Traceback (most recent call last):\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/scripts/http_api_min.py\", line 237, in do_POST\n    proba=est.predict_proba(texts)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/pipeline.py\", line 905, in predict_proba\n    return self.steps[-1][1].predict_proba(Xt, **params)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/calibration.py\", line 513, in predict_proba\n    proba = calibrated_classifier.predict_proba(X)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/calibration.py\", line 743, in predict_proba\n    predictions, _ = _get_response_values(\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/utils/_response.py\", line 214, in _get_response_values\n    y_pred = prediction_method(X)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/linear_model/_base.py\", line 352, in decision_function\n    X = validate_data(self, X, accept_sparse=\"csr\", reset=False)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 2975, in validate_data\n    _check_n_features(_estimator, X, reset=reset)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 2839, in _check_n_features\n    raise ValueError(\nValueError: X has 29227 features, but LinearSVC is expecting 29233 features as input.\n"
}

[DONE] 後續也可用 Make 指令：
  make up
  make smoke
  make eval && make intent_report
  make gate
  make e2e
[?2004h]0;youjie@DESKTOP-MP3QVS6: ~/projects/smart-mail-agent-ssot-pro[01;32myoujie@DESKTOP-MP3QVS6[00m:[01;34m~/projects/smart-mail-agent-ssot-pro[00m$ #!/usr/bin/env bash
# oneclick_pro.sh — 生產化 + 錯誤匯流 + 腳本部署 + API重啟 + smoke/eval/report/gate/e2e（不閃退、都落固定檔位）
set -Eeuo pipefail -o errtrace
ROOT="/home/youjie/projects/smart-mail-agent-ssot-pro"; cd "$ROOT"
TS="$(date +%Y%m%dT%H%M%S)"; OUT="reports_auto/oneclick/${TS}"
mkdir -p "$OUT" reports_auto/ERR reports_auto/status reports_auto/.quarantine scripts vendor/sma_tools
LOG="$OUT/run.log"; ERR="$OUT/oneclick.err"
exec > >(tee -a "$LOG") 2>&1
trap 'ec=${1:-$?}; echo "exit_code=$ec" > "$ERR"; echo "[ERR] see: $(cd "$OUT"&&pwd)/oneclick.err"; exit 0' ERR

# ---------- 固定資源（你的機器既有路徑，不猜） ----------
MODEL="/home/youjie/projects/smart-mail-agent-ssot-pro/intent/intent/artifacts/intent_pro_cal.pkl"
RULE1="/home/youjie/projects/smart-mail-agent-ssot-pro/intent/intent/.sma_tools/runtime_threshold_router.py"
RULE2="/home/youjie/projects/smart-mail-agent_ssot/.sma_tools/runtime_threshold_router.py"
# 供 gate 盡力評估（存在就用，不存在就自動跳過，不擋流程）
export SMA_KIE_GOLD="${SMA_KIE_GOLD:-/home/youjie/projects/smart-mail-agent_ssot/data/kie_eval/gold_merged.jsonl}"
export SMA_KIE_FOR="${SMA_KIE_FOR:-/home/youjie/projects/smart-mail-agent_ssot/data/kie/test_real.for_eval.jsonl}"
export SMA_SPAM_PKL="${SMA_SPAM_PKL:-/home/youjie/projects/smart-mail-agent_ssot/artifacts_inbox/77/77/artifacts_sa/spam_rules_lr.pkl}" 

[ -f "$MODEL" ] || { echo "[FATAL] 模型不存在: $MODEL"; exit 0; }
RULES="$RULE1"; [ -f "$RULES" ] || RULES="$RULE2"; [ -f "$RULES" ] || { echo "[FATAL] 找不到 rules: $RULE1 或 $RULE2"; exit 0; } 

# ---------- venv 復用 + 錯誤匯流固定 ----------
[ -e .venv ] || { [ -d /home/youjie/projects/smart-mail-agent_ssot/.venv ] && ln -s /home/youjie/projects/smart-mail-agent_ssot/.venv .venv || true; } 
PYBIN="$ROOT/.venv/bin/python"; [ -x "$PYBIN" ] || PYBIN="$(command -v python)"
ERR_DIR="$ROOT/reports_auto/ERR"; echo "RUN_DIR=$ERR_DIR" > "$ERR_DIR/where.txt"

# ---------- sma_tools：ZeroPad + label_map（6 標） ----------cat > vendor/sma_tools/__init__.py <<'PY'__all__ = ["sk_zero_pad","label_map"]PYcat > vendor/sma_tools/sk_zero_pad.py <<'PY'from __future__ import annotationsimport numpy as npfrom scipy import sparse as spfrom sklearn.base import BaseEstimator, TransformerMixinclass ZeroPad(BaseEstimator, TransformerMixin):    def __init__(self, width:int=1, dtype=np.float64, **kw):        try: self.width = int(width) if width else 1        except Exception: self.width = 1        self.dtype = dtype; self._extra = dict(kw)    def __setstate__(self, state):        self.__dict__.update(state or {})        if not hasattr(self,"width"): self.width=1        if not hasattr(self,"dtype"): self.dtype=np.float64    def fit(self, X, y=None): return self    def transform(self, X): return sp.csr_matrix((len(X), self.width), dtype=self.dtype)PYcat > vendor/sma_tools/label_map.py <<'PY'ZH2EN = {  "報價":"biz_quote", "技術支援":"tech_support", "資料異動":"profile_update",  "規則詢問":"policy_qa", "投訴":"complaint", "其他":"other"}EN2ZH = {v:k for k,v in ZH2EN.items()}EN_LABELS = ["biz_quote","complaint","other","policy_qa","profile_update","tech_support"]def normalize_labels(labels, target="en"):    if target=="en": conv = ZH2EN; passthru = set(EN2ZH.keys())    else:            conv = EN2ZH; passthru = set(ZH2EN.keys())    out=[]    for x in labels:        s = ("" if x is None else str(x))        if s in conv: out.append(conv[s])        elif s in passthru: out.append(s)        else: out.append("other")    return outPY# ---------- env.default（若缺則補，不覆蓋既有值；修正錯誤路徑） ----------touch scripts/env.defaultsed -i 's|^SMA_ERR_DIR=/reports_auto/ERR|SMA_ERR_DIR='"$ERR_DIR"'|' scripts/env.default || trueawk -v M="$MODEL" -v R1="$RULE1" -v R2="$RULE2" -v E="$ERR_DIR" 'BEGIN{hM=0;hR=0;hP=0;hE=0}$0 ~ /^SMA_INTENT_ML_PKL=/ {hM=1}$0 ~ /^SMA_RULES_SRC=/     {hR=1}$0 ~ /^PORT=/              {hP=1}$0 ~ /^SMA_ERR_DIR=/       {hE=1}{print}END{  if(!hM) print "SMA_INTENT_ML_PKL=" M;  if(!hR) print "SMA_RULES_SRC=" (system("[ -f " R1 " ]")==0?R1:R2);  if(!hP) print "PORT=8000";  if(!hE) print "SMA_ERR_DIR=" E;}' scripts/env.default > scripts/.env.tmp && mv scripts/.env.tmp scripts/env.default# ---------- sink_wrap（所有腳本錯誤 → reports_auto/ERR） ----------cat > scripts/sink_wrap.sh <<'SH'#!/usr/bin/env bashset -Eeuo pipefail -o errtraceROOT="/home/youjie/projects/smart-mail-agent-ssot-pro"; cd "$ROOT"ERR_DIR="$ROOT/reports_auto/ERR"; mkdir -p "$ERR_DIR"TS="$(date +%Y%m%dT%H%M%S)"; RUN="reports_auto/wrap/${TS}"; mkdir -p "$RUN"LOG="$RUN/run.log"; E="$RUN/wrap.err"; PY="$RUN/py_last_trace.txt"exec > >(tee -a "$LOG") 2>&1copy(){ local s="${1:-}"; local d="${2:-}"; [ -n "$s" ] && [ -f "$s" ] && cp -f "$s" "$d" || true; }sink(){ copy "$1" "$ERR_DIR/api.err"; copy "$LOG" "$ERR_DIR/run.log"; copy "$2" "$ERR_DIR/py_last_trace.txt"; copy "$3" "$ERR_DIR/server.log"; (cd "$RUN"&&pwd)|awk '{print "RUN_DIR="$0}' > "$ERR_DIR/where.txt"; ln -sfn "$(cd "$RUN"&&pwd)" "$ERR_DIR/LATEST_RUN" || true; }paths(){ echo "[PATHS]"; echo "  RUN_DIR=$(cd "$RUN"&&pwd)"; echo "  LOG=$(cd "$RUN"&&pwd)/run.log"; echo "  ERR=$(cd "$RUN"&&pwd)/wrap.err"; echo "  PY_LAST=$(cd "$RUN"&&pwd)/py_last_trace.txt"; }on_err(){ ec=${1:-$?}; echo "exit_code=$ec" > "$E"; sink "$E" "$PY" ""; paths; exit 0; }on_exit(){ copy "$LOG" "$ERR_DIR/run.log"; (cd "$RUN"&&pwd)|awk '{print "RUN_DIR="$0}' > "$ERR_DIR/where.txt"; ln -sfn "$(cd "$RUN"&&pwd)" "$ERR_DIR/LATEST_RUN" || true; paths; }trap 'on_err $?' ERR; trap on_exit EXIT[ $# -eq 0 ] && { echo "[FATAL] need command"; exit 0; }bash -x -o pipefail -c "$*" || on_err $?SHchmod +x scripts/sink_wrap.sh# ---------- API down（不閃退、一定釋放埠/清 pidfile，過程寫入 ERR/run.log） ----------cat > scripts/api_down.sh <<'SH'#!/usr/bin/env bashset -Eeuo pipefailROOT="/home/youjie/projects/smart-mail-agent-ssot-pro"; cd "$ROOT"PORT="${PORT:-$(grep -E '^PORT=' scripts/env.default 2>/dev/null | tail -n1 | cut -d= -f2 || echo 8000)}"ERR_DIR="$ROOT/reports_auto/ERR"; mkdir -p "$ERR_DIR"{echo; echo "[*] api_down @ $(date +%Y%m%dT%H%M%S)"; echo "[PATHS]"; echo "  ERR_DIR=$ERR_DIR"echo "  LOG=$ERR_DIR/run.log"; echo "  ERR=$ERR_DIR/api.err"; echo "  SERVER=$ERR_DIR/server.log"; echo "  PY_LAST=$ERR_DIR/py_last_trace.txt"; echo "  PORT=$PORT"echo "[*] pre-check listeners on :$PORT"; (command -v ss >/dev/null && ss -lptn "sport = :$PORT" || true) || truekill_wait(){ local p="${1:-}"; [ -n "$p" ] || return 0; kill "$p" 2>/dev/null || true; for _ in {1..20}; do kill -0 "$p" 2>/dev/null || return 0; sleep 0.1; done; kill -9 "$p" 2>/dev/null || true; }for pf in reports_auto/api/LAST.pid reports_auto/ERR/api.pid; do [ -f "$pf" ] || continue; pid="$(cat "$pf" 2>/dev/null || true)"; [ -n "$pid" ] && kill_wait "$pid"; rm -f "$pf" || true; doneecho "[*] force-free :$PORT if still occupied"if command -v fuser >/dev/null 2>&1; then fuser -k "${PORT}"/tcp 2>/dev/null || trueelif command -v lsof >/dev/null 2>&1; then mapfile -t LP < <(lsof -tiTCP:"${PORT}" -sTCP:LISTEN 2>/dev/null || true); for p in "${LP[@]:-}"; do kill_wait "$p"; doneelse mapfile -t SP < <(ss -lptn "sport = :${PORT}" 2>/dev/null | sed -n 's/.*pid=\([0-9]\+\).*/\1/p'); for p in "${SP[@]:-}"; do kill_wait "$p"; done; fiecho "[*] post-check listeners on :$PORT"; (command -v ss >/dev/null && ss -lptn "sport = :$PORT" || true) || trueecho "[DOWN] port=$PORT; pidfiles cleared; ERR_DIR=$ERR_DIR"; } >> "$ERR_DIR/run.log" 2>&1 || trueSHchmod +x scripts/api_down.sh# ---------- API up（導出 env → 啟 API → server.log/pid 固定到 ERR） ----------cat > scripts/api_up_env.sh <<'SH'#!/usr/bin/env bashset -Eeuo pipefailROOT="/home/youjie/projects/smart-mail-agent-ssot-pro"; cd "$ROOT"ERR_DIR="$ROOT/reports_auto/ERR"; mkdir -p "$ERR_DIR"set -a; . scripts/env.default 2>/dev/null || true; set +aexport SMA_INTENT_ML_PKL="${SMA_INTENT_ML_PKL}"export SMA_RULES_SRC="${SMA_RULES_SRC}"export SMA_ERR_DIR="$ERR_DIR"PORT="${PORT:-8000}"echo "[*] ENV" | tee -a "$ERR_DIR/run.log"echo "  SMA_INTENT_ML_PKL=$SMA_INTENT_ML_PKL" | tee -a "$ERR_DIR/run.log"echo "  SMA_RULES_SRC=$SMA_RULES_SRC"         | tee -a "$ERR_DIR/run.log"echo "  SMA_ERR_DIR=$SMA_ERR_DIR"             | tee -a "$ERR_DIR/run.log"echo "  PORT=$PORT"                           | tee -a "$ERR_DIR/run.log"bash scripts/api_down.sh || truePYBIN="$ROOT/.venv/bin/python"; [ -x "$PYBIN" ] || PYBIN="$(command -v python)"nohup "$PYBIN" scripts/http_api_min.py >> "$ERR_DIR/server.log" 2>&1 & echo $! > "$ERR_DIR/api.pid"sleep 0.5echo "[OK] API ready :$PORT" | tee -a "$ERR_DIR/run.log"SHchmod +x scripts/api_up_env.sh# ---------- tri-eval（修正標籤 + 綁 rules_feat） ----------cat > scripts/tri_eval_fixlabels.sh <<'SH'#!/usr/bin/env bashset -Eeuo pipefail -o errtraceROOT="/home/youjie/projects/smart-mail-agent-ssot-pro"; cd "$ROOT"TS="$(date +%Y%m%dT%H%M%S)"; RUN="reports_auto/eval_fix/${TS}"LOG="$RUN/run.log"; ERR="$RUN/tri_eval.err"; PY_LAST="$RUN/py_last_trace.txt"mkdir -p "$RUN"; exec > >(tee -a "$LOG") 2>&1trap 'ec=${1:-$?}; echo "exit_code=$ec" > "$ERR"; echo "[PATHS]"; echo "  RUN = $(cd "$RUN"&&pwd)"; echo "  LOG = $(cd "$RUN"&&pwd)/run.log"; echo "  ERR = $(cd "$RUN"&&pwd)/tri_eval.err"; echo "  PY_LAST = $(cd "$RUN"&&pwd)/py_last_trace.txt"; echo "  RESULT = $(cd "$RUN"&&pwd)/tri_results_fixed.json"; exit 0' ERRset -a; . scripts/env.default 2>/dev/null || true; set +aexport PYTHONPATH="src:vendor:${PYTHONPATH:-}"PYBIN="./.venv/bin/python"; [ -x "$PYBIN" ] || PYBIN="$(command -v python)"DATA="data/intent_eval/dataset.cleaned.jsonl"[ -f "$DATA" ] || { echo "[FATAL] $DATA not found"; exit 0; }echo "[*] PYBIN=$PYBIN"; echo "[*] DATA=$DATA"; echo "[*] PKL=$SMA_INTENT_ML_PKL"; echo "[*] RULES_SRC=$SMA_RULES_SRC (bind to __main__.rules_feat)""$PYBIN" - "$DATA" "$SMA_INTENT_ML_PKL" "$SMA_RULES_SRC" "$RUN/tri_results_fixed.json" <<'PY'import sys, json, importlib.util, __main__, joblib, pathlib, time, numpy as npfrom vendor.sma_tools.label_map import normalize_labelsdata, pkl, rules_src, out = sys.argv[1:5]spec = importlib.util.spec_from_file_location("rt", rules_src)m=importlib.util.module_from_spec(spec); spec.loader.exec_module(m)setattr(__main__, "rules_feat", getattr(m,"rules_feat", None))obj=joblib.load(pkl)def pick(o):    if hasattr(o,"predict"): return o    if isinstance(o,dict):        for k in ("pipe","pipeline","estimator","model"):            if k in o and o[k] is not None: return pick(o[k])    if isinstance(o,(list,tuple)) and o: return pick(o[0])    raise SystemExit("no predictor inside pickle")est = pick(obj)texts=[]; ys=[]with open(data,"r",encoding="utf-8") as f:    for line in f:        j=json.loads(line); texts.append(j.get("text","")); ys.append(j.get("label","other"))Y = normalize_labels(ys,"en")t0=time.time(); yp=[str(y) for y in est.predict(texts)]; t1=time.time()from sklearn.metrics import f1_scoreacc = float(np.mean([a==b for a,b in zip(Y, yp)]))mf1 = float(f1_score(Y, yp, average="macro"))res={"n":len(texts),"runs":[{"route":"ml","pred":yp,"latency_ms":int((t1-t0)*1000),"report":{"accuracy":acc,"macro_f1":mf1}}]}pathlib.Path(out).write_text(json.dumps(res, ensure_ascii=False, indent=2), encoding="utf-8")print(f"[OK] wrote: {out}")PYecho "[PATHS]"; echo "  RUN = $(cd "$RUN"&&pwd)"; echo "  LOG = $(cd "$RUN"&&pwd)/run.log"; echo "  ERR = $(cd "$RUN"&&pwd)/tri_eval.err"; echo "  PY_LAST = $(cd "$RUN"&&pwd)/py_last_trace.txt"; echo "  RESULT = $(cd "$RUN"&&pwd)/tri_results_fixed.json"SHchmod +x scripts/tri_eval_fixlabels.sh# ---------- tri-eval 報告 ----------cat > scripts/tri_eval_report.sh <<'SH'#!/usr/bin/env bashset -Eeuo pipefailROOT="/home/youjie/projects/smart-mail-agent-ssot-pro"; cd "$ROOT"LAST="$(ls -1dt reports_auto/eval_fix/2* reports_auto/eval/2* 2>/dev/null | head -n1 || true)"[ -n "$LAST" ] || { echo "[FATAL] no eval dir under reports_auto/eval_fix or reports_auto/eval"; exit 0; }RES="$LAST/tri_results_fixed.json"; [ -f "$RES" ] || RES="$LAST/tri_results.json"[ -f "$RES" ] || { echo "[FATAL] no tri_results json in $LAST"; exit 0; }TS="$(basename "$LAST")"; MD="reports_auto/status/INTENTS_SUMMARY_${TS}.md"PYBIN="./.venv/bin/python"; [ -x "$PYBIN" ] || PYBIN="$(command -v python)""$PYBIN" - "$RES" "$MD" <<'PY'import sys, json, pathlibres = pathlib.Path(sys.argv[1]); md = pathlib.Path(sys.argv[2])J = json.loads(res.read_text(encoding="utf-8")); runs = J.get("runs", [])m = { r.get("route"): r for r in runs }ml = m.get("ml") or {}def pick(d,k,default=0.0): return float(d.get("report",{}).get(k, default))acc = pick(ml, "accuracy"); mf1 = pick(ml, "macro_f1"); lat = int(ml.get("latency_ms",0))md.write_text(f"# INTENT TRI-EVAL SUMMARY ({res.parent.name})\n\n"              f"- RESULT_JSON: {res}\n\n"              "| route | accuracy | macro F1 | latency ms |\n|---|---:|---:|---:|\n"              f"| ml.classify | {acc:.4f} | {mf1:.4f} | {lat} |\n", encoding="utf-8")print(md)PYecho "[PATHS]"; echo "  LAST_DIR = $(cd "$LAST"&&pwd)"; echo "  RESULT   = $(cd "$LAST"&&pwd)/$(basename "$RES")"; echo "  SUMMARY  = $(cd "$(dirname "$MD")"&&pwd)/$(basename "$MD")"SHchmod +x scripts/tri_eval_report.sh# ---------- Sanity（rule/ml + tri-eval 小樣本） ----------cat > scripts/sanity_all.sh <<'SH'#!/usr/bin/env bashset -Eeuo pipefailROOT="/home/youjie/projects/smart-mail-agent-ssot-pro"; cd "$ROOT"PORT="${PORT:-$(grep -E '^PORT=' scripts/env.default 2>/dev/null | tail -n1 | cut -d= -f2 || echo 8000)}"API_DIR="$(ls -1dt reports_auto/api/2* 2>/dev/null | head -n1 || true)"[ -n "$API_DIR" ] || API_DIR="reports_auto/api/$(date +%Y%m%dT%H%M%S)"; mkdir -p "$API_DIR"jqok(){ command -v jq >/dev/null 2>&1; }echo "[*] Using API_DIR: $(cd "$API_DIR" && pwd)"; echo "[*] PORT=$PORT"for route in rule ml; do  out="$API_DIR/sanity_smoke_${route}.json"; echo "[*] smoke $route -> $out"  curl -sS -X POST "http://127.0.0.1:${PORT}/classify" -H 'Content-Type: application/json' \    -d '{"texts":["想詢問報價與交期","需要技術支援"],"route":"'"$route"'"}' > "$out" || true  if jqok; then jq . "$out" || true; else cat "$out" || true; fidoneTRI="$API_DIR/sanity_tri_eval.json"; echo "[*] /tri-eval -> $TRI"curl -sS -X POST "http://127.0.0.1:${PORT}/tri-eval" -H 'Content-Type: application/json' \  -d '{"texts":["想詢問報價與交期","需要技術支援","發票抬頭更新"],"labels":["biz_quote","tech_support","profile_update"]}' > "$TRI" || trueif jqok; then jq . "$TRI" || true; else cat "$TRI" || true; fiecho "[PATHS]"echo "  RUN_DIR = $(cd "$API_DIR"&&pwd)"echo "  LOG     = $(cd "$API_DIR"&&pwd)/run.log"echo "  ERR     = $(cd "$API_DIR"&&pwd)/api.err"echo "  PY_LAST = $(cd "$API_DIR"&&pwd)/py_last_trace.txt"echo "  SERVER  = $(cd "$API_DIR"&&pwd)/server.log"echo "  SMOKE_R = $(cd "$API_DIR"&&pwd)/sanity_smoke_rule.json"echo "  SMOKE_M = $(cd "$API_DIR"&&pwd)/sanity_smoke_ml.json"echo "  TRI_OUT = $(cd "$API_DIR"&&pwd)/sanity_tri_eval.json"SHchmod +x scripts/sanity_all.sh# ---------- Gate（3 模型：Intent / KIE / Spam；有資料就驗，無資料就跳過不擋） ----------cat > scripts/gate.sh <<'SH'#!/usr/bin/env bashset -Eeuo pipefail -o errtraceROOT="/home/youjie/projects/smart-mail-agent-ssot-pro"; cd "$ROOT"ERR_DIR="$ROOT/reports_auto/ERR"; mkdir -p "$ERR_DIR"; exec > >(tee -a "$ERR_DIR/run.log") 2>&1echo "RUN_DIR=$ERR_DIR" > "$ERR_DIR/where.txt"ok_all=true; reasons=()# Intent gateRES="$(ls -1dt reports_auto/eval_fix/2*/tri_results_fixed.json reports_auto/eval/2*/tri_results.json 2>/dev/null | head -n1 || true)"if [ -n "$RES" ]; then  PYBIN="$ROOT/.venv/bin/python"; [ -x "$PYBIN" ] || PYBIN="$(command -v python)"  J=$("$PYBIN" - "$RES" <<'PY'import json, sysJ=json.load(open(sys.argv[1],'r',encoding='utf-8')); runs=J.get("runs",[])m={r.get("route"):r for r in runs}; ml=m.get("ml") or {}acc=ml.get("report",{}).get("accuracy",0.0); mf1=ml.get("report",{}).get("macro_f1",0.0)print(f"{acc} {mf1}")PY  )  ACC=$(echo "$J"|awk '{print $1+0}'); MF1=$(echo "$J"|awk '{print $2+0}')  if awk "BEGIN{exit !($MF1>=0.92 && $ACC>=0.93)}"; then    echo "[GATE][INTENT] OK acc=$ACC mf1=$MF1"  else    ok_all=false; reasons+=("INTENT acc=${ACC} mf1=${MF1} 未達門檻(acc>=0.93,mf1>=0.92)")  fielse  reasons+=("INTENT 無 tri-eval 結果（跳過）")fi# KIE gate（若有金標與評測集，就打 /extract 逐筆比對 phone/amount micro-F1）if [ -f "${SMA_KIE_GOLD:-}" ] && [ -f "${SMA_KIE_FOR:-}" ]; then  PORT="${PORT:-$(grep -E '^PORT=' scripts/env.default 2>/dev/null | tail -n1 | cut -d= -f2 || echo 8000)}"  PYBIN="$ROOT/.venv/bin/python"; [ -x "$PYBIN" ] || PYBIN="$(command -v python)"  R=$("$PYBIN" - "${SMA_KIE_GOLD}" "${SMA_KIE_FOR}" "$PORT" <<'PY'import sys, json, requestsgold, pred_in, port = sys.argv[1], sys.argv[2], sys.argv[3]G=[json.loads(l) for l in open(gold,'r',encoding='utf-8')]X=[json.loads(l) for l in open(pred_in,'r',encoding='utf-8')]def fields_ok(f): return {"phone":f.get("phone",""),"amount":f.get("amount","")}tp=fp=fn=0for g,x in zip(G,X):    t=x.get("text","")    r=requests.post(f"http://127.0.0.1:{port}/extract",json={"texts":[t]}).json()    pred = r.get("fields",[{}])[0]    g0 = fields_ok(g); p0 = fields_ok(pred)    for k in ("phone","amount"):        y_true = 1 if g0[k] else 0        y_pred = 1 if p0[k] else 0        if y_pred==1 and y_true==1: tp+=1        elif y_pred==1 and y_true==0: fp+=1        elif y_pred==0 and y_true==1: fn+=1prec = tp/(tp+fp) if (tp+fp)>0 else 0.0rec  = tp/(tp+fn) if (tp+fn)>0 else 0.0f1   = (2*prec*rec)/(prec+rec) if (prec+rec)>0 else 0.0print(f"{prec} {rec} {f1}")PY  ) || R="0 0 0"  P=$(echo "$R"|awk '{print $1+0}'); Rr=$(echo "$R"|awk '{print $2+0}'); F1=$(echo "$R"|awk '{print $3+0}')  if awk "BEGIN{exit !($F1>=0.85)}"; then    echo "[GATE][KIE] OK f1=$F1 (p=$P r=$Rr)"  else    ok_all=false; reasons+=("KIE F1=${F1} 未達門檻(F1>=0.85)")  fielse  reasons+=("KIE 無資料（跳過）")fi# Spam gate（若有 pkl 就跑極簡 smoke；否則跳過）if [ -f "${SMA_SPAM_PKL:-}" ]; then  PYBIN="$ROOT/.venv/bin/python"; [ -x "$PYBIN" ] || PYBIN="$(command -v python)"  S=$("$PYBIN" - "$SMA_SPAM_PKL" <<'PY'import sys, joblibmdl=joblib.load(sys.argv[1])def pick(o):    if hasattr(o,"predict"): return o    if isinstance(o,dict):        for k in ("pipe","pipeline","estimator","model"):            if k in o and o[k] is not None: return pick(o[k])    if isinstance(o,(list,tuple)) and o: return pick(o[0])    raise SystemExit("no predictor")est=pick(mdl)X=["🔥限時優惠點此連結","您好，關於上週詢價補充一點資訊"]y=est.predict(X)print(",".join(map(str,y)))PY  ) || true  echo "[GATE][SPAM] smoke_pred=$S"else  reasons+=("SPAM 無模型（跳過）")fi# 統整輸出（不丟非零碼，但印出是否OK與原因）echo "---- GATE RESULT ----"if $ok_all; then echo '{"ok":true}'; else echo '{"ok":false,"reasons":['"\"$(IFS=$'\n'; echo "${reasons[*]}" | sed 's/"/\\"/g; s/$/","/' | tr -d '\n' | sed 's/,"$//')"']}' ; fiexit 0SHchmod +x scripts/gate.sh# ---------- e2e（classify→extract→plan→act） ----------cat > scripts/e2e_smoke.sh <<'SH'#!/usr/bin/env bashset -Eeuo pipefailROOT="/home/youjie/projects/smart-mail-agent-ssot-pro"; cd "$ROOT"PORT="${PORT:-$(grep -E '^PORT=' scripts/env.default 2>/dev/null | tail -n1 | cut -d= -f2 || echo 8000)}"T1='您好，想詢問報價與交期，數量100台'T2='附件服務無法連線，請協助處理，連絡 0912-345-678'C=$(curl -sS -X POST "http://127.0.0.1:${PORT}/classify" -H 'Content-Type: application/json' -d "{\"texts\":[\"$T1\",\"$T2\"],\"route\":\"ml\"}")echo "$C" | jq . || echo "$C"I1=$(echo "$C" | jq -r '.pred[0]') ; I2=$(echo "$C" | jq -r '.pred[1]')E=$(curl -sS -X POST "http://127.0.0.1:${PORT}/extract" -H 'Content-Type: application/json' -d "{\"texts\":[\"$T1\",\"$T2\"]}")echo "$E" | jq . || echo "$E"P=$(curl -sS -X POST "http://127.0.0.1:${PORT}/plan" -H 'Content-Type: application/json' -d "{\"intents\":[\"$I1\",\"$I2\"]}")echo "$P" | jq . || echo "$P"A1=$(echo "$P" | jq -r '.actions[0]') ; A2=$(echo "$P" | jq -r '.actions[1]')A=$(curl -sS -X POST "http://127.0.0.1:${PORT}/act" -H 'Content-Type: application/json' \  -d "{\"items\":[{\"mail_id\":\"m1\",\"action\":\"$A1\",\"fields\":$(echo "$E" | jq '.fields[0]')},{\"mail_id\":\"m2\",\"action\":\"$A2\",\"fields\":$(echo "$E" | jq '.fields[1]')}]} ")echo "$A" | jq . || echo "$A"[7mls -1 "$(pwd)/rpa_out" 2>/dev/null | sed "s#^#  rpa_out/#" || true[27m[7mSH[27m[7mchmod +x scripts/e2e_smoke.sh[27m[7m# ---------- Makefile ----------[27m[7mcat > Makefile <<'MK'[27m[7mSHELL := /bin/bash[27m[7m.PHONY: up down smoke eval intent_report gate e2e[27m[7mup:            ; @bash scripts/api_up_env.sh[27m[7mdown:          ; @bash scripts/api_down.sh || true[27m[7msmoke:         ; @bash scripts/sanity_all.sh[27m[7meval:          ; @bash scripts/tri_eval_fixlabels.sh[27m[7mintent_report: ; @bash scripts/tri_eval_report.sh[27m[7mgate:          ; @bash scripts/gate.sh[27m[7me2e:           ; @bash scripts/e2e_smoke.sh[27m[7mMK[27m[7m# ---------- 啟動 & 檢查 & 生成輸出 ----------[27m[7mbash scripts/api_up_env.sh[27m[7mbash scripts/sanity_all.sh[27m[7mbash scripts/tri_eval_fixlabels.sh[27m[7mbash scripts/tri_eval_report.sh[27m[7mbash scripts/gate.sh[27m[7mecho "[WHERE] $ERR_DIR"[27m[7mecho "  SERVER  = $ERR_DIR/server.log"[27m[7mecho "  RUNLOG  = $ERR_DIR/run.log"[27m[7mecho "  API_ERR = $ERR_DIR/api.err"[27m[7mecho "  PY_LAST = $ERR_DIR/py_last_trace.txt"[27m[7mecho "[DONE] 可用： make up | make smoke | make eval && make intent_report | make gate | make e2e"[27mls -1 "$(pwd)/rpa_out" 2>/dev/null | sed "s#^#  rpa_out/#" || trueSHchmod +x scripts/e2e_smoke.sh# ---------- Makefile ----------cat > Makefile <<'MK'SHELL := /bin/bash.PHONY: up down smoke eval intent_report gate e2eup:            ; @bash scripts/api_up_env.shdown:          ; @bash scripts/api_down.sh || truesmoke:         ; @bash scripts/sanity_all.sheval:          ; @bash scripts/tri_eval_fixlabels.shintent_report: ; @bash scripts/tri_eval_report.shgate:          ; @bash scripts/gate.she2e:           ; @bash scripts/e2e_smoke.shMK# ---------- 啟動 & 檢查 & 生成輸出 ----------bash scripts/api_up_env.shbash scripts/sanity_all.shbash scripts/tri_eval_fixlabels.shbash scripts/tri_eval_report.shbash scripts/gate.shecho "[WHERE] $ERR_DIR"echo "  SERVER  = $ERR_DIR/server.log"echo "  RUNLOG  = $ERR_DIR/run.log"echo "  API_ERR = $ERR_DIR/api.err"echo "  PY_LAST = $ERR_DIR/py_last_trace.txt"echo "[DONE] 可用： make up | make smoke | make eval && make intent_report | make gate | make e2e"
[?2004l[*] ENV
  SMA_INTENT_ML_PKL=/home/youjie/projects/smart-mail-agent-ssot-pro/intent/intent/artifacts/intent_pro_cal.pkl
  SMA_RULES_SRC=/home/youjie/projects/smart-mail-agent-ssot-pro/intent/intent/.sma_tools/runtime_threshold_router.py
  SMA_ERR_DIR=/home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/ERR
  PORT=8000
[OK] API ready :8000
[*] Using API_DIR: /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/api/20250915T201456
[*] PORT=8000
[*] smoke rule -> reports_auto/api/20250915T201456/sanity_smoke_rule.json
{
  "pred": [
    "biz_quote",
    "tech_support"
  ],
  "latency_ms": 0,
  "route": "rule"
}
[*] smoke ml -> reports_auto/api/20250915T201456/sanity_smoke_ml.json
{
  "error": "server_error",
  "trace": "Traceback (most recent call last):\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/scripts/http_api_min.py\", line 188, in do_POST\n    yp=route_ml(texts); tag=\"ml\"\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/scripts/http_api_min.py\", line 115, in route_ml\n    proba=est.predict_proba(texts)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/pipeline.py\", line 905, in predict_proba\n    return self.steps[-1][1].predict_proba(Xt, **params)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/calibration.py\", line 513, in predict_proba\n    proba = calibrated_classifier.predict_proba(X)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/calibration.py\", line 743, in predict_proba\n    predictions, _ = _get_response_values(\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/utils/_response.py\", line 214, in _get_response_values\n    y_pred = prediction_method(X)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/linear_model/_base.py\", line 352, in decision_function\n    X = validate_data(self, X, accept_sparse=\"csr\", reset=False)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 2975, in validate_data\n    _check_n_features(_estimator, X, reset=reset)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 2839, in _check_n_features\n    raise ValueError(\nValueError: X has 29227 features, but LinearSVC is expecting 29233 features as input.\n"
}
[*] /tri-eval -> reports_auto/api/20250915T201456/sanity_tri_eval.json
{
  "error": "server_error",
  "trace": "Traceback (most recent call last):\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/scripts/http_api_min.py\", line 223, in do_POST\n    t1=time.perf_counter(); yp=fn(texts); ms=int((time.perf_counter()-t1)*1000)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/scripts/http_api_min.py\", line 115, in route_ml\n    proba=est.predict_proba(texts)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/pipeline.py\", line 905, in predict_proba\n    return self.steps[-1][1].predict_proba(Xt, **params)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/calibration.py\", line 513, in predict_proba\n    proba = calibrated_classifier.predict_proba(X)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/calibration.py\", line 743, in predict_proba\n    predictions, _ = _get_response_values(\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/utils/_response.py\", line 214, in _get_response_values\n    y_pred = prediction_method(X)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/linear_model/_base.py\", line 352, in decision_function\n    X = validate_data(self, X, accept_sparse=\"csr\", reset=False)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 2975, in validate_data\n    _check_n_features(_estimator, X, reset=reset)\n  File \"/home/youjie/projects/smart-mail-agent-ssot-pro/.venv/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 2839, in _check_n_features\n    raise ValueError(\nValueError: X has 29227 features, but LinearSVC is expecting 29233 features as input.\n"
}
[PATHS]
  RUN_DIR = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/api/20250915T201456
  LOG     = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/api/20250915T201456/run.log
  ERR     = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/api/20250915T201456/api.err
  PY_LAST = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/api/20250915T201456/py_last_trace.txt
  SERVER  = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/api/20250915T201456/server.log
  SMOKE_R = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/api/20250915T201456/sanity_smoke_rule.json
  SMOKE_M = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/api/20250915T201456/sanity_smoke_ml.json
  TRI_OUT = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/api/20250915T201456/sanity_tri_eval.json
[*] PYBIN=./.venv/bin/python
[*] DATA=data/intent_eval/dataset.cleaned.jsonl
[*] PKL=/home/youjie/projects/smart-mail-agent-ssot-pro/intent/intent/artifacts/intent_pro_cal.pkl
[*] RULES_SRC=/home/youjie/projects/smart-mail-agent-ssot-pro/intent/intent/.sma_tools/runtime_threshold_router.py (bind to __main__.rules_feat)
[OK] wrote: reports_auto/eval_fix/20250916T000944/tri_results_fixed.json
[PATHS]
  RUN = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/eval_fix/20250916T000944
  LOG = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/eval_fix/20250916T000944/run.log
  ERR = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/eval_fix/20250916T000944/tri_eval.err
  PY_LAST = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/eval_fix/20250916T000944/py_last_trace.txt
  RESULT = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/eval_fix/20250916T000944/tri_results_fixed.json
reports_auto/status/INTENTS_SUMMARY_20250916T000944.md
[PATHS]
  LAST_DIR = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/eval_fix/20250916T000944
  RESULT   = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/eval_fix/20250916T000944/tri_results_fixed.json
  SUMMARY  = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/status/INTENTS_SUMMARY_20250916T000944.md
[GATE][INTENT] OK acc=0.954386 mf1=0.945322
no predictor
[GATE][SPAM] smoke_pred=
---- GATE RESULT ----
{"ok":false,"reasons":["KIE F1=0 未達門檻(F1>=0.85)"]}
[WHERE] /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/ERR
  SERVER  = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/ERR/server.log
  RUNLOG  = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/ERR/run.log
  API_ERR = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/ERR/api.err
  PY_LAST = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/ERR/py_last_trace.txt
[DONE] 可用： make up | make smoke | make eval && make intent_report | make gate | make e2e
[?2004h]0;youjie@DESKTOP-MP3QVS6: ~/projects/smart-mail-agent-ssot-pro[01;32myoujie@DESKTOP-MP3QVS6[00m:[01;34m~/projects/smart-mail-agent-ssot-pro[00m$ #!/usr/bin/env bash
# scripts/pack_light.sh — 一鍵打包（<256MB）：大模型用「同名指示檔」替換 + 產出 manifest
set -Eeuo pipefail -o errtrace

# === 固定根目錄（可自行改，但預設用你專案路徑） ===
ROOT="/home/youjie/projects/smart-mail-agent-ssot-pro"; cd "$ROOT"

TS="$(date +%Y%m%dT%H%M%S)"
OUT_DIR="$ROOT/reports_auto/export/${TS}"
STAGE="$OUT_DIR/stage"
ARCH="$OUT_DIR/sma_pro_${TS}.tar.gz"
LOG="$OUT_DIR/pack.log"
ERR="$OUT_DIR/pack.err"
MANIFEST_JSON="$OUT_DIR/manifest.json"
MANIFEST_TXT="$OUT_DIR/MANIFEST.txt"

# 打包尺寸上限（避免 >256MB）
MAX_ARCH_MB="${MAX_ARCH_MB:-256}"
# 只要超過此閾值就轉成同名指示檔（單檔大小）
THRESHOLD_MB="${THRESHOLD_MB:-10}"

mkdir -p "$OUT_DIR"
exec > >(tee -a "$LOG") 2>&1
on_err(){ ec=${1:-$?}; echo "exit_code=$ec" > "$ERR"; echo "[ERR] see: $ERR"; exit "$ec"; }
trap 'on_err $?' ERR

echo "[*] PACK start @ $TS"
echo "[*] STAGE = $STAGE"
echo "[*] OUT   = $ARCH"
echo "[*] LIMIT = ${MAX_ARCH_MB}MB, pointerize if > ${THRESHOLD_MB}MB"# --- 收集 env.default 中已知的模型/規則路徑，方便寫進指示檔 ---declare -A KNOWN_PATHS=()if [ -f scripts/env.default ]; then  while IFS='=' read -r k v; do    case "$k" in      SMA_INTENT_ML_PKL|SMA_RULES_SRC|SMA_SPAM_PKL|SMA_KIE_GOLD|SMA_KIE_FOR)        KNOWN_PATHS["$k"]="${v}";;    esac  done < <(grep -E '^(SMA_INTENT_ML_PKL|SMA_RULES_SRC|SMA_SPAM_PKL|SMA_KIE_GOLD|SMA_KIE_FOR)=' scripts/env.default || true)fi# --- 先做乾淨 staging（排除超大/沒必要的目錄） ---# 1) 全拷貝到 staging，但排除：.git, .venv, reports_auto（稍後選擇性加入 status）, __pycache__, *.pyc 等# 2) 之後再把 reports_auto/status/*.md 與最近一次 tri_results 複製進來rm -rf "$STAGE"mkdir -p "$STAGE"rsync -a \  --exclude '.git/' \  --exclude '.venv/' \  --exclude 'reports_auto/**' \  --exclude '__pycache__/' \  --exclude '.mypy_cache/' \  --exclude '.pytest_cache/' \  --exclude '*.pyc' \  --exclude '*.pyo' \  --exclude '*.ipynb_checkpoints/' \  ./ "$STAGE/"# 追加狀態/報告：保留「可閱讀」成果但不把整個 reports_auto 打進包mkdir -p "$STAGE/reports_auto/status"cp -f reports_auto/status/*.md "$STAGE/reports_auto/status/" 2>/dev/null || true# 常見 tri-eval 結果find reports_auto -maxdepth 4 -type f -name 'tri_results*.json' -exec bash -c '  for f in "$@"; do    dst="'"$STAGE"'/${f#./}"; mkdir -p "$(dirname "$dst")"; cp -f "$f" "$dst";  done' bash {} + 2>/dev/null || true# --- 掃描 staging 內「超過 THRESHOLD_MB 的檔案」→ 同名指示檔 ---# 支援模式：模型/權重/壓縮大檔常見副檔名，亦會以大小判斷為主mapfile -t LARGE_FILES < <(  find "$STAGE" -type f -size +"${THRESHOLD_MB}"M \    \( -iname '*.pkl' -o -iname '*.pt' -o -iname '*.bin' -o -iname '*.ckpt' -o -iname '*.onnx' -o -iname '*.h5' -o -iname '*.model' -o -iname '*.tar' -o -iname '*.tar.gz' -o -iname '*.zip' \) \    | sort)POINTER_LIST=()pointerize(){  local abs_stage_file="$1"  local rel="${abs_stage_file#$STAGE/}"  local abs_repo="$ROOT/$rel"  local size_bytes; size_bytes="$(stat -c%s "$abs_stage_file" 2>/dev/null || stat -f%z "$abs_stage_file" 2>/dev/null || echo 0)"  local size_human; size_human="$(du -h "$abs_stage_file" | awk '{print $1}')"  # 以同名覆蓋為「指示檔」：保留相同檔名與副檔名  cat > "$abs_stage_file".tmp <<EOF[POINTER FILE — NOT THE REAL WEIGHT]This file is intentionally replaced to keep the archive under ${MAX_ARCH_MB}MB.Original path (in repo): $abs_repoOriginal size (approx) : $size_human (${size_bytes} bytes)How to retrieve:- You previously used this path on your machine. If it exists locally, copy it back to this location.- Or set via scripts/env.default (SMA_* vars). Known env now:$(for k in "${!KNOWN_PATHS[@]}"; do printf "  - %s=%s\n" "$k" "${KNOWN_PATHS[$k]}"; done)Generated at: $(date -Is)EOF  # 用同名替換（覆蓋原檔）  rm -f "$abs_stage_file"  mv "$abs_stage_file".tmp "$abs_stage_file"  POINTER_LIST+=("$rel|$size_human")}echo "[*] pointerize if > ${THRESHOLD_MB}MB ..."for f in "${LARGE_FILES[@]:-}"; do  echo "  - pointerize: ${f#$STAGE/}"  pointerize "$f"done# --- 產生 manifest（包含被指示化與被排除規則） ---{  echo "{"  echo '  "generated_at": "'$(date -Is)'",'  echo '  "root": "'$ROOT'",'  echo '  "threshold_mb": '$THRESHOLD_MB','  echo '  "max_archive_mb": '$MAX_ARCH_MB','  echo '  "excluded_rules": [".git/", ".venv/", "reports_auto/** (except status & tri_results*.json)", "__pycache__/", "*.pyc"],'  echo '  "pointerized_files": ['  if [ ${#POINTER_LIST[@]} -gt 0 ]; then    for i in "${!POINTER_LIST[@]}"; do      rel="${POINTER_LIST[$i]%%|*}"; sz="${POINTER_LIST[$i]##*|}"      printf '    { "path": "%s", "approx_size": "%s" }' "$rel" "$sz"      [ "$i" -lt $((${#POINTER_LIST[@]}-1)) ] && printf ','      printf '\n'    done  fi  echo '  ]'  echo "}"} > "$MANIFEST_JSON"{  echo "# PACK MANIFEST ($TS)"  echo  echo "ROOT: $ROOT"  echo "ARCHIVE: $ARCH"  echo "THRESHOLD_MB: $THRESHOLD_MB"  echo "MAX_ARCH_MB : $MAX_ARCH_MB"  echo  echo "Excluded Rules:"  echo "  - .git/, .venv/, reports_auto/** (except status & tri_results*.json), __pycache__/, *.pyc"  echo  echo "Pointerized Files (> ${THRESHOLD_MB}MB):"  if [ ${#POINTER_LIST[@]} -eq 0 ]; then    echo "  (none)"  else    for x in "${POINTER_LIST[@]}"; do      rel="${x%%|*}"; sz="${x##*|}"      echo "  - $rel  (~$sz)"    done  fi  echo[7m  echo "Known env from scripts/env.default:"[27m[7m  for k in "${!KNOWN_PATHS[@]}"; do[27m[7m    printf "  - %s=%s\n" "$k" "${KNOWN_PATHS[$k]}"[27m[7m  done[27m[7m} > "$MANIFEST_TXT"[27m[7m# --- 打包 ---[27m[7mecho "[*] tar.gz ..."[27m[7mmkdir -p "$(dirname "$ARCH")"[27m[7mtar -C "$STAGE" -czf "$ARCH" .[27m[7m# --- 尺寸檢查 ---[27m[7mARCH_MB="$(du -m "$ARCH" | awk '{print $1}')"[27m[7mecho "[*] archive size = ${ARCH_MB} MB"[27m[7mif [ "$ARCH_MB" -ge "$MAX_ARCH_MB" ]; then[27m[7m  echo "[FATAL] archive exceeds ${MAX_ARCH_MB}MB (now ${ARCH_MB}MB). Increase THRESHOLD_MB or exclude more." >&2[27m[7m  exit 3[27m[7mfi[27m[7m# --- 列出重點路徑 ---[27m[7mecho[27m[7mecho "[OK] PACK DONE."[27m[7mecho "[PATHS]"[27m[7mecho "  OUT_DIR = $OUT_DIR"[27m[7mecho "  STAGE   = $STAGE"[27m[7mecho "  ARCHIVE = $ARCH"[27m[7mecho "  LOG     = $LOG"[27m[7mecho "  MANIFEST_JSON = $MANIFEST_JSON"[27m[7mecho "  MANIFEST_TXT  = $MANIFEST_TXT"[27m  echo "Known env from scripts/env.default:"  for k in "${!KNOWN_PATHS[@]}"; do    printf "  - %s=%s\n" "$k" "${KNOWN_PATHS[$k]}"  done} > "$MANIFEST_TXT"# --- 打包 ---echo "[*] tar.gz ..."mkdir -p "$(dirname "$ARCH")"tar -C "$STAGE" -czf "$ARCH" .# --- 尺寸檢查 ---ARCH_MB="$(du -m "$ARCH" | awk '{print $1}')"echo "[*] archive size = ${ARCH_MB} MB"if [ "$ARCH_MB" -ge "$MAX_ARCH_MB" ]; then  echo "[FATAL] archive exceeds ${MAX_ARCH_MB}MB (now ${ARCH_MB}MB). Increase THRESHOLD_MB or exclude more." >&2  exit 3fi# --- 列出重點路徑 ---echoecho "[OK] PACK DONE."echo "[PATHS]"echo "  OUT_DIR = $OUT_DIR"echo "  STAGE   = $STAGE"echo "  ARCHIVE = $ARCH"echo "  LOG     = $LOG"echo "  MANIFEST_JSON = $MANIFEST_JSON"echo "  MANIFEST_TXT  = $MANIFEST_TXT"
[?2004l[*] PACK start @ 20250916T005124
[*] STAGE = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/export/20250916T005124/stage
[*] OUT   = /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/export/20250916T005124/sma_pro_20250916T005124.tar.gz
[*] LIMIT = 256MB, pointerize if > 10MB
[*] pointerize if > 10MB ...
  - pointerize: 
du: invalid zero-length file name
[ERR] see: /home/youjie/projects/smart-mail-agent-ssot-pro/reports_auto/export/20250916T005124/pack.err
